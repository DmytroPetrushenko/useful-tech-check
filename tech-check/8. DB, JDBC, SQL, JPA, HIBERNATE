1. Что такое реляционная база данных?

    Реляционная база данных – это набор данных с предопределенными связями между ними. Эти данные организованны в
    виде набора таблиц, состоящих из столбцов и строк. В таблицах хранится информация об объектах, представленных
    в базе данных. В каждом столбце таблицы хранится определенный тип данных, в каждой ячейке – значение атрибута.
    Каждая стока таблицы представляет собой набор связанных значений, относящихся к одному объекту или сущности.
    Каждая строка в таблице может быть помечена уникальным идентификатором, называемым первичным ключом, а строки
    из нескольких таблиц могут быть связаны с помощью внешних ключей.

    Нереляционная база данных — это база данных, в которой в отличие от большинства традиционных систем баз данных
    не используется табличная схема строк и столбцов. В этих базах данных применяется модель хранения,
    оптимизированная под конкретные требования типа хранимых данных. Например, данные могут храниться как простые
    пары "ключ — значение", документы JSON или граф, состоящий из ребер и вершин.

2. Привести примеры реляционных и нереляционных баз данных.

    Реляционные СУБД - MySQL, Oracle DB, PostgreSQL.
    Нереляционные СУБД - CouchDB, MongoDB, DB XML.

3. Что такое нормализация?

    Нормализация – это процесс удаления избыточных данных.
    Нормализация – это метод проектирования базы данных, который позволяет привести базу данных
    к минимальной избыточности. Избыточность устраняется, как правило, за счёт декомпозиции отношений (таблиц),
    т.е. разбиения одной таблицы на несколько.
    Дает:
    - Устранения аномалий.
    - Повышения производительности.
    - Повышения удобства управления данными.
    Избыточность данных – это когда одни и те же данные хранятся в базе в нескольких местах,
    именно это и приводит к аномалиям. Так как в этом случае необходимо добавлять, изменять или удалять одни и
    те же данные в нескольких местах. Например, если не выполнить операцию в каком-нибудь одном месте, то возникает
    ситуация, когда одни данные не соответствуют вроде как точно таким же данным в другом месте.

4. Какие существуют нормальные формы БД?

    Нормальная форма базы данных – это набор правил и критериев, которым должна отвечать база данных.
    Процесс нормализации – это последовательный процесс приведения базы данных к эталонному виду,
    т.е. переход от одной нормальной формы к следующей.
    Ненормализованная форма или нулевая нормальная форма (UNF)
    Первая нормальная форма (1NF)
        Таким образом, чтобы база данных находилась в 1 нормальной форме, необходимо чтобы ее таблицы соблюдали
        следующие реляционные принципы:
        - В таблице не должно быть дублирующих строк.
        - В каждой ячейке таблицы хранится атомарное значение (одно не составное значение).
        - В столбце хранятся данные одного типа.
        - Отсутствуют массивы и списки в любом виде.
    Вторая нормальная форма (2NF)
        Чтобы база данных находилась во второй нормальной форме (2NF), необходимо чтобы ее таблицы
        удовлетворяли следующим требованиям:
        - Таблица должна находиться в первой нормальной форме.
        - Таблица должна иметь ключ.
        - Все неключевые столбцы таблицы должны зависеть от полного ключа (в случае если он составной).
        Ключ – это столбец или набор столбцов, по которым гарантировано можно отличить строки друг от друга, т.е.
        ключ идентифицирует каждую строку таблицы. По ключу мы можем обратиться к конкретной строке данных в таблице.
    Третья нормальная форма (3NF)
        Требование третьей нормальной формы (3NF) заключается в том, чтобы в таблицах отсутствовала
        транзитивная зависимость. Транзитивная зависимость – это когда неключевые столбцы зависят от значений
        других неключевых столбцов.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Нормальная форма Бойса-Кодда (BCNF)
    Четвертая нормальная форма (4NF)
    Пятая нормальная форма (5NF)
    Доменно-ключевая нормальная форма (DKNF)
    Шестая нормальная форма (6NF)

    База данных считается нормализованной, если она находится как минимум в третьей нормальной форме (3NF).

5. Что такое primary key?

    Primary key/Первичный ключ - это одно или несколько полей в таблице, сочетание которых уникально для каждой записи.

6. Что такое foreign key?

    Внешний ключ - это столбец или набор столбцов в дочерней таблице, который в точности соответствует столбцу
    или набору столбцов, определенных в родительской таблице как первичный, и ссылается на них.

7. Что такое индексы БД? Для чего используются?

    Индекс (англ. index) — объект базы данных, создаваемый с целью повышения производительности поиска данных.
    Таблицы в базе данных могут иметь большое количество строк, которые хранятся в произвольном порядке, и их поиск
    по заданному критерию путём последовательного просмотра таблицы строка за строкой может занимать много времени.
    Индекс формируется из значений одного или нескольких столбцов таблицы и указателей на соответствующие строки
    таблицы и, таким образом, позволяет искать строки, удовлетворяющие критерию поиска. Ускорение работы с
    использованием индексов достигается в первую очередь за счёт того, что индекс имеет структуру, оптимизированную
    под поиск — например, сбалансированного дерева.

8. Какие есть виды индексов БД?

    Дерево, hash таблица,

9. Задача: Дана таблица User(поля: id, name, surname, birthdayDate, sex) с 1 млрд. пользователей. Необходимо часто
    доставать данные про пользователей по birthdayDate range. Какая структура данных должна быть в индексе в таком
    случае?

    Дерево.

10. Что такое транзакция?

    Транзакция — это набор операций по работе с базой данных (БД), объединенных в один атомарный пакет.

11. Назвать основные особенности транзакций.

    ACID
    - Atomicity - Атомарность - каждая транзакция должна быть либо полностью выполнена, либо не выполнена совсем.
    Промежуточные состояния не допускаются.
    - Consistency - Согласованность/Консистентность - Транзакция, достигающая своего нормального завершения
    сохраняет согласованность базы данных. Не рушит ее структуру и связи.
    - Isolation - Изолированность - Во время выполнения транзакции другие транзакции не должны оказывать
    влияния на её результат.
    - Durability - Надёжность - Если пользователь получил подтверждение от системы, что транзакция выполнена,
    он может быть уверен, что сделанные им изменения не будут отменены из-за какого-либо сбоя.

12. Уровни изоляции транзакций.

    - Read uncommitted - Уровень, имеющий самую плохую согласованность данных, но самую высокую скорость
    выполнения транзакций. Название уровня говорит само за себя — каждая транзакция видит незафиксированные
    изменения другой транзакции (феномен грязного чтения).
    - Read committed - Для этого уровня параллельно исполняющиеся транзакции видят только зафиксированные
    изменения из других транзакций. Таким образом, данный уровень обеспечивает защиту от грязного чтения.
    - Repeatable read - Уровень, позволяющий предотвратить феномен неповторяющегося чтения. Т.е. мы не видим в
    исполняющейся транзакции измененные и удаленные записи другой транзакцией. Но все еще видим вставленные
    записи из другой транзакции. Чтение фантомов никуда не уходит.
    - Serializable - Уровень, при котором транзакции ведут себя как будто ничего более не существует, никакого
    влияния друг на друга нет. В классическом представлении этот уровень избавляет от эффекта чтения фантомов.

13. Дана таблиця “Користувачів” з наступними полями: ID, Name, Address, City, PostalCode, Country, Age
    Вибрати імена і вік всіх користувачів. - select
    Вибрати унікальні міста, в яких проживають користувачі. - distinct
    Вибрати всі дані про користувачів, які проживають в Україні. - where
    Вибрати всіх користувачів, які проживають не в Україні. - where not
    Вибрати всіх користувачів і відсортувати їх за іменем за/проти алфавітного порядку. - order by (asc/desc)
    Знайти наймолодшого/найстаршого користувача. - min/max
    Знайти кількість користувачів, чий вік == 18. - count
    Знайти середній вік усіх користувачів. - avg
    Знайти всіх користувачів, чиє ім’я починається на “А”. - like
    Вивести імена всіх користувачів, які живуть в Києві, Харкові, Одесі, Дніпрі. - in
    Вивести всіх користувачів, які потрапляють в межі 18-30 років. - between
    Вивести міста, в яких населення перевищує 100 000 осіб. - group by … having

    ???????????????????????????????????????????????????????????????????????

14. Что такое JOIN? Для чего используется? Виды.

    JOIN оператор языка SQL предназначен для соединения двух или более таблиц базы данных по совпадающему условию.

    - Запрос с оператором INNER JOIN предназначен для соединения таблиц и вывода результирующей таблицы,
    в которой данные полностью пересекаются по условию, указанному после ON.
    - Запрос с оператором LEFT OUTER JOIN предназначен для соединения таблиц и вывода результирующей таблицы,
    в которой данные полностью пересекаются по условию, указанному после ON, и дополняются записями из первой
    по порядку (левой) таблицы, даже если они не соответствуют условию. У записей левой таблицы, которые не
    соответствуют условию, значение столбца из правой таблицы будет NULL (неопределённым).
    - Запрос с оператором RIGHT OUTER JOIN предназначен для соединения таблиц и вывода результирующей таблицы,
    в которой данные полностью пересекаются по условию, указанному после ON, и дополняются записями из второй
    по порядку (правой) таблицы, даже если они не соответствуют условию. У записей правой таблицы, которые не
    соответствуют условию, значение столбца из левой таблицы будет NULL (неопределённым).
    - Запрос с оператором FULL OUTER JOIN предназначен для соединения таблиц и вывода результирующей таблицы,
    в которой данные полностью пересекаются по условию, указанному после ON, и дополняются записями из первой
    (левой) и второй (правой) таблиц, даже если они не соответствуют условию. У записей, которые не соответствуют
    условию, значение столбцов из другой таблицы будет NULL (неопределённым).

15. Где и для чего используется оператор HAVING?

    Используется в запросах SQL для фильтрации сгруппированных при помощи GROUP BY значений полученных
    при помощи агрегатных функций (COUNT(), MAX(),...).

16. В чем разница между HAVING и WHERE?

    WHERE отбирает и фильтрует значения в строках таблиц, HAVING работает с результатами группировки полученными
    при помощи агрегатных функций (COUNT(), MAX(),...).

17. Для чего используется оператор GROUP BY. Привести пример.

    Позволяет группировать данные при выборке из базы данных по одному или нескольким столбцам, почти всегда
    используются с агрегатными функциями. Возвращает по одной записи для каждой группы.
    В таблице company есть столбцы employee, department, salary.
    SELECT department, AVG(*) FROM company GROUP BY department

18. Що таке агрегатна функція? Навести приклади.

    Это функции действуют в отношении значений столбца для получения единого результирующего значения.
    SUM(), MIN(), MAX(), COUNT(), AVG().

19. В чем разница между COUNT(*) та COUNT({column})?

    COUNT(*) - считает общее число строк в таблице
    COUNT({column}) - считает количество "ненулевых"-непустых значений в столбце

20. Що виконує оператор EXIST?

    EXIST позволяет вставить еще один запрос SELECT и определить есть ли в результатах поиска записи.
    Возвращает true или false.

19. Для чего используется оператор UNION?

    UNION используется для объединения результатов нескольких запросов SELECT

20. Что такое TIMESTAMP?

    TIMESTAMP это тип хранения данных даты и времени. Данные хранятся в виде количества секунд прошедших с начала
    "эпохи Юникса" с 1970-01-01 00:00:00.

21. Что такое sql инъекция?

    Sql инъекция - это своеобразная атака на базу данных, которая позволяет выполнить какое-то действие или несколько
    действий, которые не задавались разработчиком. Внедрение в запрос произвольного Sql кода.

22. Что такое jdbc?

    JDBC - Java DataBase Connectivity - программный интерфейс Java, который определяет методы, с помощью которых
    программа Java взаимодействует с базами данных. Взаимодействие осуществляется с помощью драйверов, обеспечивающих
    реализацию интерфейсов для конкретных СУБД.

23. При помощи чего делаются запросы в БД?

    В Java JDBC запросы делаются при помощи объектов Statement(Statement, PreparedStatement, CallableStatement),
    которые создаются из соединения Connection.

24. Разница Statement и PreparedStatement.

    Statement - для создания статических запросов, как параметр принимает String, что менее читаемо и подвержено
    Sql инъекциям.
    PreparedStatement - для создания прекомпилированных запросов с подставными параметрами или без них, в теле
    запроса обозначаются как '?'.

25. Какие преимущества PreparedStatement над Statement?

    PreparedStatement позволяет более удобно использовать и подставлять динамические значения в запрос.
    Защищен от Sql инъекций, за счет того что они прекомпилированные, то они компилируются один раз, а далее в них
    подставляются параметры на этапе выполнения программы.

26. Какая разница между execute(), executeQuery(), executeUpdate()?

    Для выполнения команд Sql над объектом Statement используются методы execute/...
    execute() - выполняет любые команды, возвращает boolean.
    executeQuery() - выполняет команду SELECT, возвращает объект ResultSet, который содержит результаты запроса.
    executeUpdate() - выполняет команды INSERT, UPDATE, DELETE..., возвращает int - количество строк, которые
    затронула операция.

27. Какую роль выполняет JDBC DriverManager class?

    Он осуществляет управление драйверами баз данных и создает соединение с базой данных используя указанный
    пользователем драйвер и URL.

28. Что необходимо указать, чтобы получить идентификатор, сгенерированный БД, при выполнении INSERT?

    Statement.RETURN_GENERATED_KEYS

29. Что такое JPA?

    JPA - Java Persistence API - спецификация описывающая, систему управления сохранением Java объектов
    в таблицы реляционных БД в удобном виде. Сама Java не имеет реализации JPA. Hibernate - самая популярная
    реализация JPA, которая помимо реализации, еще расширяет дополнительными возможностями.

30. Что такое JPQL? Чем отличается от SQL?

    JPQL (Java Persistence Query Language) - язык запросов, похожий на SQL, только вместо имен и колонок таблиц БД
    использует имена классов моделей/сущностей/Entity и их атрибуты. В качестве параметров также используются типы
    данных атрибутов.

31. С какими видами БД работает JPA?

    Спецификация JPA говорит об отображении Java объектов в таблицы реляционных БД. Но есть реализации JPA -
    которые написаны для нереляционных БД: Kundera, ObjectDB, но с урезанной функциональностью.

32. Какая спецификация описывает взаимодействие с нереляционными БД?

    JDO - Java Data Object - описывает спецификацию более общую чем JPA, для работы с любыми БД и хранилищами.

33. Что такое Hibernate? В чем разница JPA и Hibernate?

    JPA - спецификация описывающая правила, Hibernate - самая популярная реализация спецификации JPA 2.1, с рядом
    дополнительных возможностей, не описанными в JPA.

34. Что такое ORM?

    ORM - Object Relational Mapping - технология программирования, которая связывает БД с концепциями ООП.
    ORM предназначена для преобразования объекта приложения в форму для сохранения в БД, а также для извлечения из БД
    и преобразования в объект.

35. Что такое CRITERIA API?

    CRITERIA API - один из способов формировать взаимодействие между объектами и формами в БД. Позволяет создавать
    запросы с критериями программным способом. По сути это альтернативный способ определения JPQL запроса. Основным
    преимуществом является, то что ошибки могут быть обнаружены во время компиляции. Более объектно-ориентирован
    и позволяет сократить необходимый код.

36. Что такое Entity?

    Entity - это хранимый в БД объект бизнес логики. Или объект который определенным образом находит свое отображение
    в таблице БД.

37. Может ли не Entity класс наследоваться от Entity?

    Может.

38. Может ли Entity клас наследоваться от других Entity классов?

    Может.

39. Может ли Entity быть абстрактным классом?

    Может.

40. Может ли Entity клас наследоваться от не Entity класса?

    Может.

41. Перечислите условия, которым должен отвечать Entity класс?

    1. Должен быть отмечен аннотацией @Entity
    2. Должен иметь пустой конструктор public/protected.
    3. Entity класс должен быть классом верхнего уровня.
    4. Entity класс не может быть enum или interface
    5. Entity класс не может быть final
    6. Entity класс не может содержать final поля или методы участвующие в маппинге.
    7. Если объект Entity класса будет передаваться по значению, как отдельный объект, он должен реализовывать
    интерфейс Serializable.
    8. Поля Entity должны быть private, обращение к полям из других классов только через getters/setters.
    9. Entity класс должен содержать первичный ключ.

42. Что будет, если в Entity не будет пустого конструктора?

    Hibernate не сможет создать объект класса при считывании из базы данных.

    Пустой конструктор необходим для создания нового экземпляра с помощью отражения персистентности.
    Фреймворки Persistence используют отражение Class<T>.newInstance() чтобы создать экземпляр объектов, затем
    вызывает getters/setters чтобы установить поля.

43. Почему не рекомендуют делать Entity класс final?

    Hibernate не может создать прокси класс класса Entity

44. Какие типы данных могут использоваться в Entity классе?

    - примитивы и их обертки
    - String
    - любые сериализуемые типы Java
    - enum
    - Entity
    - Embeddable
    - коллекции типов 1-6



45.Що таке POJO клас?

    ??????????????????????????????????????????

46. Що таке вбудований embeddable клас?

    Это класс не используемый сам по себе - только как часть одного или нескольких Entity классов.

47. Вимоги до embeddable класу?

48. Що таке mapped superclass?

49. Які типи зв’язків між entity ви знаєте?

50. Які існують типи fetch стратегій?

51. Що таке проксі об’єкт?

52. Які за замовчуванням fetch стратегії в кожного з типів зв’язків між сутностями в jpa2?

53. Які стратегії наслідування описані в JPA?

54. Що таке entity manager? За що відповідає?

55. Розкажіть про статуси життєвого циклу entity?

56. Як впливають операції на entity, коли вони перебувають в одному із 4-х статусів життєвого циклу.

57. Що таке кешування?

58. Скільки рівнів кешу підтримує jpa? В чому різниця між ними?

59. Який з рівнів стоїть по дефолту?

60. Яка анотація дозволяє управляти кешем?

61. Що таке callback методи? За що відповідають? Навести приклади.
Як зробити так, щоб поле не мапилось при створенні entity?
Яка унікальна стратегія наслідування є в hibernate, але немає в jpa?
Що таке Session? SessionFactory?
SessionFactory потокобезпечний?
В чому різниця між openSession() і getCurrentSession()?
Яка різниця між методами get() і load()?
Що таке каскадність? Як вона використовується в hibernate?
Навести приклад використання Cascade.DELETE.
Hibernate practice
Який вид зв’язку будуть мати наступні сутності?
В який із java класів ти додаси посилання і яку анотацію поставиш над полем?
Номер телефону - користувач
Група - студент
Людина - номер рахунку в банку
Людина - квиток на потяг
Книга - жанр
Факультет - викладач
Книга - автор
П’єса - актор
Водійські права - людина
Класний керівник (в школі) - клас
Замовлення - деталі замовлення
Машина - двигун
Машина - тех паспорт
Потяг - маршрут